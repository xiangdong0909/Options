// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SOptions.proto

#include "SOptions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lrl {
constexpr SOptions::SOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spef_file__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dot_file__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uncertainty__(0)
  , slack_margin__(0)
  , ignore_clk__(false)
  , debug_report__(false)
  , wire_bud_mode_rc__(false){}
struct SOptionsDefaultTypeInternal {
  constexpr SOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SOptionsDefaultTypeInternal() {}
  union {
    SOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SOptionsDefaultTypeInternal _SOptions_default_instance_;
}  // namespace lrl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SOptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SOptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SOptions_2eproto = nullptr;

const uint32_t TableStruct_SOptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, uncertainty__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, slack_margin__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, ignore_clk__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, debug_report__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, wire_bud_mode_rc__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, spef_file__),
  PROTOBUF_FIELD_OFFSET(::lrl::SOptions, dot_file__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lrl::SOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lrl::_SOptions_default_instance_),
};

const char descriptor_table_protodef_SOptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SOptions.proto\022\003lrl\"\245\001\n\010SOptions\022\024\n\014un"
  "certainty_\030\001 \001(\002\022\025\n\rslack_margin_\030\002 \001(\002\022"
  "\023\n\013ignore_clk_\030\003 \001(\010\022\025\n\rdebug_report_\030\004 "
  "\001(\010\022\031\n\021wire_bud_mode_rc_\030\005 \001(\010\022\022\n\nspef_f"
  "ile_\030\006 \001(\t\022\021\n\tdot_file_\030\007 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SOptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SOptions_2eproto = {
  false, false, 197, descriptor_table_protodef_SOptions_2eproto, "SOptions.proto", 
  &descriptor_table_SOptions_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_SOptions_2eproto::offsets,
  file_level_metadata_SOptions_2eproto, file_level_enum_descriptors_SOptions_2eproto, file_level_service_descriptors_SOptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SOptions_2eproto_getter() {
  return &descriptor_table_SOptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SOptions_2eproto(&descriptor_table_SOptions_2eproto);
namespace lrl {

// ===================================================================

class SOptions::_Internal {
 public:
};

SOptions::SOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lrl.SOptions)
}
SOptions::SOptions(const SOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spef_file__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    spef_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spef_file_().empty()) {
    spef_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spef_file_(), 
      GetArenaForAllocation());
  }
  dot_file__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dot_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dot_file_().empty()) {
    dot_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dot_file_(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uncertainty__, &from.uncertainty__,
    static_cast<size_t>(reinterpret_cast<char*>(&wire_bud_mode_rc__) -
    reinterpret_cast<char*>(&uncertainty__)) + sizeof(wire_bud_mode_rc__));
  // @@protoc_insertion_point(copy_constructor:lrl.SOptions)
}

inline void SOptions::SharedCtor() {
spef_file__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  spef_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dot_file__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dot_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uncertainty__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wire_bud_mode_rc__) -
    reinterpret_cast<char*>(&uncertainty__)) + sizeof(wire_bud_mode_rc__));
}

SOptions::~SOptions() {
  // @@protoc_insertion_point(destructor:lrl.SOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spef_file__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dot_file__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SOptions::ArenaDtor(void* object) {
  SOptions* _this = reinterpret_cast< SOptions* >(object);
  (void)_this;
}
void SOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:lrl.SOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spef_file__.ClearToEmpty();
  dot_file__.ClearToEmpty();
  ::memset(&uncertainty__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wire_bud_mode_rc__) -
      reinterpret_cast<char*>(&uncertainty__)) + sizeof(wire_bud_mode_rc__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float uncertainty_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          uncertainty__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float slack_margin_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          slack_margin__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool ignore_clk_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ignore_clk__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool debug_report_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          debug_report__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wire_bud_mode_rc_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          wire_bud_mode_rc__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string spef_file_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_spef_file_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lrl.SOptions.spef_file_"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dot_file_ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dot_file_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lrl.SOptions.dot_file_"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrl.SOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float uncertainty_ = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty_ = this->_internal_uncertainty_();
  uint32_t raw_uncertainty_;
  memcpy(&raw_uncertainty_, &tmp_uncertainty_, sizeof(tmp_uncertainty_));
  if (raw_uncertainty_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_uncertainty_(), target);
  }

  // float slack_margin_ = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_slack_margin_ = this->_internal_slack_margin_();
  uint32_t raw_slack_margin_;
  memcpy(&raw_slack_margin_, &tmp_slack_margin_, sizeof(tmp_slack_margin_));
  if (raw_slack_margin_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_slack_margin_(), target);
  }

  // bool ignore_clk_ = 3;
  if (this->_internal_ignore_clk_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ignore_clk_(), target);
  }

  // bool debug_report_ = 4;
  if (this->_internal_debug_report_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_debug_report_(), target);
  }

  // bool wire_bud_mode_rc_ = 5;
  if (this->_internal_wire_bud_mode_rc_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_wire_bud_mode_rc_(), target);
  }

  // string spef_file_ = 6;
  if (!this->_internal_spef_file_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spef_file_().data(), static_cast<int>(this->_internal_spef_file_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lrl.SOptions.spef_file_");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_spef_file_(), target);
  }

  // string dot_file_ = 7;
  if (!this->_internal_dot_file_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dot_file_().data(), static_cast<int>(this->_internal_dot_file_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lrl.SOptions.dot_file_");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dot_file_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrl.SOptions)
  return target;
}

size_t SOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrl.SOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spef_file_ = 6;
  if (!this->_internal_spef_file_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spef_file_());
  }

  // string dot_file_ = 7;
  if (!this->_internal_dot_file_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dot_file_());
  }

  // float uncertainty_ = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty_ = this->_internal_uncertainty_();
  uint32_t raw_uncertainty_;
  memcpy(&raw_uncertainty_, &tmp_uncertainty_, sizeof(tmp_uncertainty_));
  if (raw_uncertainty_ != 0) {
    total_size += 1 + 4;
  }

  // float slack_margin_ = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_slack_margin_ = this->_internal_slack_margin_();
  uint32_t raw_slack_margin_;
  memcpy(&raw_slack_margin_, &tmp_slack_margin_, sizeof(tmp_slack_margin_));
  if (raw_slack_margin_ != 0) {
    total_size += 1 + 4;
  }

  // bool ignore_clk_ = 3;
  if (this->_internal_ignore_clk_() != 0) {
    total_size += 1 + 1;
  }

  // bool debug_report_ = 4;
  if (this->_internal_debug_report_() != 0) {
    total_size += 1 + 1;
  }

  // bool wire_bud_mode_rc_ = 5;
  if (this->_internal_wire_bud_mode_rc_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SOptions::GetClassData() const { return &_class_data_; }

void SOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SOptions *>(to)->MergeFrom(
      static_cast<const SOptions &>(from));
}


void SOptions::MergeFrom(const SOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrl.SOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spef_file_().empty()) {
    _internal_set_spef_file_(from._internal_spef_file_());
  }
  if (!from._internal_dot_file_().empty()) {
    _internal_set_dot_file_(from._internal_dot_file_());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty_ = from._internal_uncertainty_();
  uint32_t raw_uncertainty_;
  memcpy(&raw_uncertainty_, &tmp_uncertainty_, sizeof(tmp_uncertainty_));
  if (raw_uncertainty_ != 0) {
    _internal_set_uncertainty_(from._internal_uncertainty_());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_slack_margin_ = from._internal_slack_margin_();
  uint32_t raw_slack_margin_;
  memcpy(&raw_slack_margin_, &tmp_slack_margin_, sizeof(tmp_slack_margin_));
  if (raw_slack_margin_ != 0) {
    _internal_set_slack_margin_(from._internal_slack_margin_());
  }
  if (from._internal_ignore_clk_() != 0) {
    _internal_set_ignore_clk_(from._internal_ignore_clk_());
  }
  if (from._internal_debug_report_() != 0) {
    _internal_set_debug_report_(from._internal_debug_report_());
  }
  if (from._internal_wire_bud_mode_rc_() != 0) {
    _internal_set_wire_bud_mode_rc_(from._internal_wire_bud_mode_rc_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SOptions::CopyFrom(const SOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrl.SOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOptions::IsInitialized() const {
  return true;
}

void SOptions::InternalSwap(SOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spef_file__, lhs_arena,
      &other->spef_file__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dot_file__, lhs_arena,
      &other->dot_file__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SOptions, wire_bud_mode_rc__)
      + sizeof(SOptions::wire_bud_mode_rc__)
      - PROTOBUF_FIELD_OFFSET(SOptions, uncertainty__)>(
          reinterpret_cast<char*>(&uncertainty__),
          reinterpret_cast<char*>(&other->uncertainty__));
}

::PROTOBUF_NAMESPACE_ID::Metadata SOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SOptions_2eproto_getter, &descriptor_table_SOptions_2eproto_once,
      file_level_metadata_SOptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lrl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lrl::SOptions* Arena::CreateMaybeMessage< ::lrl::SOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lrl::SOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
