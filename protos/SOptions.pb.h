// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SOptions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SOptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SOptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SOptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SOptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SOptions_2eproto;
namespace lrl {
class SOptions;
struct SOptionsDefaultTypeInternal;
extern SOptionsDefaultTypeInternal _SOptions_default_instance_;
}  // namespace lrl
PROTOBUF_NAMESPACE_OPEN
template<> ::lrl::SOptions* Arena::CreateMaybeMessage<::lrl::SOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lrl {

// ===================================================================

class SOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lrl.SOptions) */ {
 public:
  inline SOptions() : SOptions(nullptr) {}
  ~SOptions() override;
  explicit constexpr SOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SOptions(const SOptions& from);
  SOptions(SOptions&& from) noexcept
    : SOptions() {
    *this = ::std::move(from);
  }

  inline SOptions& operator=(const SOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOptions& operator=(SOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SOptions* internal_default_instance() {
    return reinterpret_cast<const SOptions*>(
               &_SOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SOptions& a, SOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lrl.SOptions";
  }
  protected:
  explicit SOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpefFileFieldNumber = 6,
    kDotFileFieldNumber = 7,
    kUncertaintyFieldNumber = 1,
    kSlackMarginFieldNumber = 2,
    kIgnoreClkFieldNumber = 3,
    kDebugReportFieldNumber = 4,
    kWireBudModeRcFieldNumber = 5,
  };
  // string spef_file_ = 6;
  void clear_spef_file_();
  const std::string& spef_file_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spef_file_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spef_file_();
  PROTOBUF_NODISCARD std::string* release_spef_file_();
  void set_allocated_spef_file_(std::string* spef_file_);
  private:
  const std::string& _internal_spef_file_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spef_file_(const std::string& value);
  std::string* _internal_mutable_spef_file_();
  public:

  // string dot_file_ = 7;
  void clear_dot_file_();
  const std::string& dot_file_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dot_file_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dot_file_();
  PROTOBUF_NODISCARD std::string* release_dot_file_();
  void set_allocated_dot_file_(std::string* dot_file_);
  private:
  const std::string& _internal_dot_file_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dot_file_(const std::string& value);
  std::string* _internal_mutable_dot_file_();
  public:

  // float uncertainty_ = 1;
  void clear_uncertainty_();
  float uncertainty_() const;
  void set_uncertainty_(float value);
  private:
  float _internal_uncertainty_() const;
  void _internal_set_uncertainty_(float value);
  public:

  // float slack_margin_ = 2;
  void clear_slack_margin_();
  float slack_margin_() const;
  void set_slack_margin_(float value);
  private:
  float _internal_slack_margin_() const;
  void _internal_set_slack_margin_(float value);
  public:

  // bool ignore_clk_ = 3;
  void clear_ignore_clk_();
  bool ignore_clk_() const;
  void set_ignore_clk_(bool value);
  private:
  bool _internal_ignore_clk_() const;
  void _internal_set_ignore_clk_(bool value);
  public:

  // bool debug_report_ = 4;
  void clear_debug_report_();
  bool debug_report_() const;
  void set_debug_report_(bool value);
  private:
  bool _internal_debug_report_() const;
  void _internal_set_debug_report_(bool value);
  public:

  // bool wire_bud_mode_rc_ = 5;
  void clear_wire_bud_mode_rc_();
  bool wire_bud_mode_rc_() const;
  void set_wire_bud_mode_rc_(bool value);
  private:
  bool _internal_wire_bud_mode_rc_() const;
  void _internal_set_wire_bud_mode_rc_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lrl.SOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spef_file__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dot_file__;
  float uncertainty__;
  float slack_margin__;
  bool ignore_clk__;
  bool debug_report__;
  bool wire_bud_mode_rc__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SOptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SOptions

// float uncertainty_ = 1;
inline void SOptions::clear_uncertainty_() {
  uncertainty__ = 0;
}
inline float SOptions::_internal_uncertainty_() const {
  return uncertainty__;
}
inline float SOptions::uncertainty_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.uncertainty_)
  return _internal_uncertainty_();
}
inline void SOptions::_internal_set_uncertainty_(float value) {
  
  uncertainty__ = value;
}
inline void SOptions::set_uncertainty_(float value) {
  _internal_set_uncertainty_(value);
  // @@protoc_insertion_point(field_set:lrl.SOptions.uncertainty_)
}

// float slack_margin_ = 2;
inline void SOptions::clear_slack_margin_() {
  slack_margin__ = 0;
}
inline float SOptions::_internal_slack_margin_() const {
  return slack_margin__;
}
inline float SOptions::slack_margin_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.slack_margin_)
  return _internal_slack_margin_();
}
inline void SOptions::_internal_set_slack_margin_(float value) {
  
  slack_margin__ = value;
}
inline void SOptions::set_slack_margin_(float value) {
  _internal_set_slack_margin_(value);
  // @@protoc_insertion_point(field_set:lrl.SOptions.slack_margin_)
}

// bool ignore_clk_ = 3;
inline void SOptions::clear_ignore_clk_() {
  ignore_clk__ = false;
}
inline bool SOptions::_internal_ignore_clk_() const {
  return ignore_clk__;
}
inline bool SOptions::ignore_clk_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.ignore_clk_)
  return _internal_ignore_clk_();
}
inline void SOptions::_internal_set_ignore_clk_(bool value) {
  
  ignore_clk__ = value;
}
inline void SOptions::set_ignore_clk_(bool value) {
  _internal_set_ignore_clk_(value);
  // @@protoc_insertion_point(field_set:lrl.SOptions.ignore_clk_)
}

// bool debug_report_ = 4;
inline void SOptions::clear_debug_report_() {
  debug_report__ = false;
}
inline bool SOptions::_internal_debug_report_() const {
  return debug_report__;
}
inline bool SOptions::debug_report_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.debug_report_)
  return _internal_debug_report_();
}
inline void SOptions::_internal_set_debug_report_(bool value) {
  
  debug_report__ = value;
}
inline void SOptions::set_debug_report_(bool value) {
  _internal_set_debug_report_(value);
  // @@protoc_insertion_point(field_set:lrl.SOptions.debug_report_)
}

// bool wire_bud_mode_rc_ = 5;
inline void SOptions::clear_wire_bud_mode_rc_() {
  wire_bud_mode_rc__ = false;
}
inline bool SOptions::_internal_wire_bud_mode_rc_() const {
  return wire_bud_mode_rc__;
}
inline bool SOptions::wire_bud_mode_rc_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.wire_bud_mode_rc_)
  return _internal_wire_bud_mode_rc_();
}
inline void SOptions::_internal_set_wire_bud_mode_rc_(bool value) {
  
  wire_bud_mode_rc__ = value;
}
inline void SOptions::set_wire_bud_mode_rc_(bool value) {
  _internal_set_wire_bud_mode_rc_(value);
  // @@protoc_insertion_point(field_set:lrl.SOptions.wire_bud_mode_rc_)
}

// string spef_file_ = 6;
inline void SOptions::clear_spef_file_() {
  spef_file__.ClearToEmpty();
}
inline const std::string& SOptions::spef_file_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.spef_file_)
  return _internal_spef_file_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SOptions::set_spef_file_(ArgT0&& arg0, ArgT... args) {
 
 spef_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lrl.SOptions.spef_file_)
}
inline std::string* SOptions::mutable_spef_file_() {
  std::string* _s = _internal_mutable_spef_file_();
  // @@protoc_insertion_point(field_mutable:lrl.SOptions.spef_file_)
  return _s;
}
inline const std::string& SOptions::_internal_spef_file_() const {
  return spef_file__.Get();
}
inline void SOptions::_internal_set_spef_file_(const std::string& value) {
  
  spef_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SOptions::_internal_mutable_spef_file_() {
  
  return spef_file__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SOptions::release_spef_file_() {
  // @@protoc_insertion_point(field_release:lrl.SOptions.spef_file_)
  return spef_file__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SOptions::set_allocated_spef_file_(std::string* spef_file_) {
  if (spef_file_ != nullptr) {
    
  } else {
    
  }
  spef_file__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spef_file_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spef_file__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spef_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lrl.SOptions.spef_file_)
}

// string dot_file_ = 7;
inline void SOptions::clear_dot_file_() {
  dot_file__.ClearToEmpty();
}
inline const std::string& SOptions::dot_file_() const {
  // @@protoc_insertion_point(field_get:lrl.SOptions.dot_file_)
  return _internal_dot_file_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SOptions::set_dot_file_(ArgT0&& arg0, ArgT... args) {
 
 dot_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lrl.SOptions.dot_file_)
}
inline std::string* SOptions::mutable_dot_file_() {
  std::string* _s = _internal_mutable_dot_file_();
  // @@protoc_insertion_point(field_mutable:lrl.SOptions.dot_file_)
  return _s;
}
inline const std::string& SOptions::_internal_dot_file_() const {
  return dot_file__.Get();
}
inline void SOptions::_internal_set_dot_file_(const std::string& value) {
  
  dot_file__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SOptions::_internal_mutable_dot_file_() {
  
  return dot_file__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SOptions::release_dot_file_() {
  // @@protoc_insertion_point(field_release:lrl.SOptions.dot_file_)
  return dot_file__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SOptions::set_allocated_dot_file_(std::string* dot_file_) {
  if (dot_file_ != nullptr) {
    
  } else {
    
  }
  dot_file__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dot_file_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dot_file__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dot_file__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lrl.SOptions.dot_file_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lrl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SOptions_2eproto
